#!/usr/bin/python

import argparse
from SpimRender.dataloader import read3dTiff

from SpimRender.volume_render import *

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="3d max projects a file renders a file")

    parser.add_argument("-i","--input",dest="input",metavar="file",
                        type=str,nargs=1,default = None, required = True)

    parser.add_argument("-o","--output",dest="output",metavar="file",
                        type=str,nargs=1,default = None, required = True)

    parser.add_argument("-w","--width",dest="width",metavar="width",
                        type=int,nargs=1,default = 400)

    parser.add_argument("-s","--scale",dest="scale",metavar="s",
                        type=float,nargs=1 ,default = [1.])

    parser.add_argument("-t","--translate",dest="translate",type=float,
                        nargs=3,default = [0,0,0],
                        metavar=("x","y","z"))

    parser.add_argument("-r","--rotation",dest="rotation",type=float,
                        nargs=4,default = [0,1,0,0],
                        metavar=("w","x","y","z"))

    parser.add_argument("-OV","--Orthoview",dest="ortho",action="store_true")

    args = parser.parse_args()

    for k,v in vars(args).iteritems():
        print k,v

    rend = VolumeRenderer2((args.width,args.width))

    data = read3dTiff(args.input[0])

    rend.set_data(data)
    rend.set_units([1.,1.,4.])

    M = scaleMat(*(args.scale*3))
    M = dot(M,rotMat(*args.rotation))
    M = dot(M,transMatReal(*args.translate))

    rend.set_modelView(M)

    out = rend.render(isPerspective = not args.ortho)

    imsave(args.output[0],out)


    # import pylab

    # pylab.imshow(out)

    # pylab.show()
